name: Exptracker

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      image:
        description: "Choose environment"
        type: choice
        options:
          - dev
          - prod
        required: true
        default: dev    
      version:
        description: "Choose Version"
        type: string
        required: false
        default: 0.0.1
      test_only:
        description: "Skip Deploy"
        type: boolean
        required: false
        default: false

run-name: "${{ github.workflow }}-${{ inputs.image }}:${{ github.run_number }}"

env:
  ECR_URI: "644435390668.dkr.ecr.ap-south-1.amazonaws.com/dan-exptracker"
  AWS_REGION: "ap-south-1"
  APP_DOCKERFILE: "Dockerfile.app"
  NGINX_DOCKERFILE: "Dockerfile.nginx"
  APP_NAME: "app-${{ inputs.image }}"
  NGINX_NAME: "nginx-${{ inputs.image }}"
  BUILD_NUMBER: "${{ github.run_number }}"
  GITOPS_REPO: ""

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          chmod +x /usr/bin/yq

      - name: Build Docker Images
        run: |
          docker build -f ${{ env.APP_DOCKERFILE }} -t ${{ env.APP_NAME }}:${{ env.BUILD_NUMBER }} .
          docker build -f ${{ env.NGINX_DOCKERFILE }} -t ${{ env.NGINX_NAME }}:${{ env.BUILD_NUMBER }} .

      - name: Setup Testing Environment
        run: |
          mv env.example .env
          sed -i 's/#image_app:.*$/image: ${{ env.APP_NAME }}:${{ env.BUILD_NUMBER }}/' docker-compose.yml
          sed -i 's/#image_nginx:.*$/image: ${{ env.NGINX_NAME }}:${{ env.BUILD_NUMBER }}/' docker-compose.yml
          docker compose up -d
          chmod +x ./tests/healthcheck.sh
          chmod +x ./tests/e2e.sh

      - name: Run E2E Tests
        run: |
          ./tests/healthcheck.sh localhost 30 5
          ./tests/e2e.sh localhost

      - name: Determine Version
        if: ${{ !inputs.test_only }}
        id: version
        run: |
          commit_msg=$(git log -1 --pretty=%B | tr -d '\n')
          echo "Commit Message: $commit_msg"
          
          last_tag=$(git tag --list '[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n 1)
          echo "Last tag: $last_tag"
          
          if [ -z "$last_tag" ]; then
            new_version="1.0.0"
          else
            major=$(echo "$last_tag" | cut -d. -f1)
            minor=$(echo "$last_tag" | cut -d. -f2)
            patch=$(( $(echo "$last_tag" | cut -d. -f3) + 1 ))
            new_version="$major.$minor.$patch"
          fi
          echo "New version: $new_version"
          echo "::set-output name=version::$new_version"
        shell: bash

      - name: Configure AWS Credentials
        if: ${{ !inputs.test_only }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Authenticate Docker ECR
        if: ${{ !inputs.test_only }}
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_URI }}

      - name: Tag and Push Image to ECR
        if: ${{ !inputs.test_only }}
        run: |
          docker tag ${{ env.APP_NAME }}:${{ env.BUILD_NUMBER }} ${{ env.ECR_URI }}:${{ steps.version.outputs.version }}
          docker push ${{ env.ECR_URI }}:${{ steps.version.outputs.version }}

  deploy:
    if: ${{ !inputs.test_only }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout application repository
        uses: actions/checkout@v4
        with:
          path: application-repo

      - name: Checkout GitOps Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.GITOPS_REPO }}
          path: gitops-repo
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download yq
        run: |
          wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          chmod +x /usr/bin/yq

      - name: Update Helm Chart
        working-directory: gitops-repo
        run: |
          yq -i '.appVersion = "${{ needs.build.outputs.version }}"' glivs/Chart.yaml
          yq -i '.application.image.tag = "${{ needs.build.outputs.version }}"' glivs/values.yaml

      - name: Commit and Push Changes
        working-directory: gitops-repo
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add glivs/Chart.yaml
          git add glivs/values.yaml
          git commit -m "App version - ${{ needs.build.outputs.version }}"
          git push origin main

      - name: Tag Commit
        working-directory: application-repo
        run: |
          git clean -f -x
          git tag ${{ needs.build.outputs.version }}
          git push origin ${{ needs.build.outputs.version }}


